# Generated by Django 2.0.12 on 2020-01-09 03:48

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('assets', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='DeployLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('d_type', models.CharField(choices=[('deploy', '部署'), ('rollback', '回滚')], default=0, max_length=10, verbose_name='操作类型')),
                ('branch_tag', models.CharField(default='master', max_length=16, verbose_name='分支或标签名称')),
                ('release_name', models.CharField(max_length=100, verbose_name='部署版本')),
                ('release_desc', models.CharField(max_length=100, verbose_name='版本说明')),
                ('result', models.TextField(verbose_name='部署过程')),
                ('c_time', models.DateTimeField(auto_now_add=True, verbose_name='操作时间')),
                ('deploy_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': '部署记录表',
                'verbose_name_plural': '部署记录表',
                'db_table': 'ops_deploy_log',
            },
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('project_name', models.CharField(max_length=64, verbose_name='项目名称')),
                ('project_env', models.CharField(choices=[('test', '测试环境'), ('fz', '仿真环境'), ('prod', '生产环境')], default='test', max_length=4, verbose_name='项目环境')),
                ('project_web', models.CharField(blank=True, default='', max_length=64, verbose_name='项目网址')),
                ('project_org', models.TextField(blank=True, default='', verbose_name='项目架构JSON数据')),
                ('project_memo', models.TextField(blank=True, default='', verbose_name='项目描述')),
                ('project_admin', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='proj_admin', to=settings.AUTH_USER_MODEL, verbose_name='项目负责人')),
                ('project_member', models.ManyToManyField(blank=True, related_name='proj_member', to=settings.AUTH_USER_MODEL, verbose_name='项目成员')),
            ],
            options={
                'verbose_name': '项目表',
                'verbose_name_plural': '项目表',
                'db_table': 'ops_project',
                'permissions': (('view_project', '读取项目列表权限'), ('deploy_project', '代码发布权限')),
            },
        ),
        migrations.CreateModel(
            name='Project_Config_Ticket',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('proj_audit_group', models.SmallIntegerField(blank=True, default=None, null=True, verbose_name='项目授权组')),
                ('proj_branch_tag', models.CharField(max_length=20, verbose_name='项目分支或Tag')),
                ('proj_uuid', models.UUIDField(default=uuid.uuid4)),
                ('proj_status', models.SmallIntegerField(default=0, verbose_name='是否可用')),
                ('proj_memo', models.CharField(blank=True, max_length=20, null=True, verbose_name='备注')),
                ('wx_notice', models.BooleanField(default=False, verbose_name='是否开启微信通知')),
                ('mail_notice', models.BooleanField(default=False, verbose_name='是否开启郵件通知')),
                ('to_mail', models.TextField(blank=True, default='', verbose_name='收件人邮箱')),
                ('cc_mail', models.TextField(blank=True, default='', verbose_name='抄送人邮箱')),
                ('versions', models.TextField(blank=True, default='', verbose_name='存储部署过的版本')),
                ('proj_app', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='assets.ProjectApp', verbose_name='应用名称')),
                ('proj_env', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='assets.ProjectEnv', verbose_name='项目环境')),
                ('proj_name', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='assets.ProjectName', verbose_name='项目名称')),
            ],
            options={
                'verbose_name': '配置发布工單表',
                'verbose_name_plural': '配置发布工單表',
                'db_table': 'ops_project_config_ticket',
            },
        ),
        migrations.CreateModel(
            name='Project_Deploy_Record',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('deploy_ip', models.GenericIPAddressField(verbose_name='发布IP=资产ID')),
                ('deploy_status', models.IntegerField(choices=[(0, '发布失败'), (1, '连接成功'), (2, '备份成功'), (3, '代码同步'), (4, '更改属主'), (5, '部署前任务'), (6, '部署代码'), (9, '部署后任务')], default=0, verbose_name='发布状态')),
                ('deploy_times', models.IntegerField(default=0, verbose_name='发布次数')),
                ('rollback_status', models.IntegerField(default=0, verbose_name='回滚状态')),
                ('rollback_times', models.IntegerField(default=0, verbose_name='回滚次数')),
                ('create_date', models.DateTimeField(auto_now_add=True)),
                ('update_date', models.DateTimeField(auto_now_add=True)),
                ('assets', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='assets_deploy_record', to='assets.Assets', verbose_name='关联资产记录表')),
            ],
            options={
                'verbose_name': '发布记录',
                'verbose_name_plural': '发布记录',
                'db_table': 'ops_project_deploy_record',
            },
        ),
        migrations.CreateModel(
            name='Project_Deploy_Ticket',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ticket_no', models.BigIntegerField(verbose_name='发布项目ID')),
                ('ticket_user', models.CharField(max_length=30, verbose_name='工单申请人')),
                ('ticket_commit', models.CharField(max_length=100, verbose_name='commit ID')),
                ('ticket_subject', models.CharField(max_length=200, verbose_name='工单申请主题')),
                ('ticket_content', models.TextField(verbose_name='工单申请内容')),
                ('ticket_audit', models.CharField(max_length=30, verbose_name='部署指派人')),
                ('ticket_status', models.IntegerField(choices=[(0, '已通过'), (1, '已拒绝'), (2, '审核中'), (3, '已部署'), (4, '已回滚')], default='审核中', verbose_name='工单状态')),
                ('ticket_level', models.IntegerField(choices=[(0, '非紧急'), (1, '紧急')], default='非紧急', verbose_name='工单紧急程度')),
                ('ticket_cancel', models.TextField(blank=True, null=True, verbose_name='取消原因')),
                ('create_time', models.DateTimeField(auto_now_add=True, null=True, verbose_name='工单创建时间')),
                ('modify_time', models.DateTimeField(auto_now=True, verbose_name='工单最后修改时间')),
                ('ticket_config', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='config_ticket', to='projs.Project_Config_Ticket', verbose_name='关联工单配置表')),
                ('ticket_platform', models.ManyToManyField(related_name='deploy_platform', to='assets.PlatformName', verbose_name='发布平台')),
            ],
            options={
                'verbose_name': '部署工单表',
                'verbose_name_plural': '部署工单表',
                'db_table': 'ops_project_deploy_ticket',
            },
        ),
        migrations.CreateModel(
            name='ProjectConfig',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('project_role', models.CharField(max_length=20, verbose_name='项目角色名称')),
                ('repo', models.CharField(choices=[('svn', 'svn'), ('git', 'git')], max_length=3, verbose_name='仓库类型')),
                ('repo_user', models.CharField(blank=True, default='', max_length=10, verbose_name='仓库用户名')),
                ('repo_password', models.CharField(blank=True, default='', max_length=16, verbose_name='仓库密码')),
                ('repo_url', models.CharField(max_length=100, unique=True, verbose_name='项目仓库路径')),
                ('repo_model', models.CharField(choices=[('branch', 'branch'), ('tag', 'tag'), ('trunk', 'trunk')], default='branch', max_length=10, verbose_name='版本控制类型')),
                ('src_dir', models.CharField(max_length=100, verbose_name='代码检出目录')),
                ('exclude', models.TextField(blank=True, default='', verbose_name='排除文件')),
                ('run_user', models.CharField(default='root', max_length=10, verbose_name='运行服务用户')),
                ('deploy_webroot', models.CharField(max_length=100, verbose_name='目标机器webroot')),
                ('deploy_releases', models.CharField(max_length=100, verbose_name='目标机器版本库地址')),
                ('releases_num', models.PositiveSmallIntegerField(default=20, verbose_name='版本保留个数')),
                ('prev_deploy', models.TextField(blank=True, default='', verbose_name='代码检出前操作')),
                ('post_deploy', models.TextField(blank=True, default='', verbose_name='代码检出后操作')),
                ('prev_release', models.TextField(blank=True, default='', verbose_name='切换版本前操作')),
                ('post_release', models.TextField(blank=True, default='', verbose_name='切换版本后操作')),
                ('versions', models.TextField(blank=True, default='', verbose_name='存储部署过的版本')),
            ],
            options={
                'verbose_name': '项目配置表',
                'verbose_name_plural': '项目配置表',
                'db_table': 'ops_project_config',
            },
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('service_name', models.CharField(help_text='数据库、中间件等', max_length=32, verbose_name='服务名称')),
                ('service_memo', models.TextField(blank=True, default='', verbose_name='服务描述')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='assets.ProjectName')),
                ('service_asset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='assets.Assets', verbose_name='提供服务的机器')),
            ],
            options={
                'verbose_name': '服务类型表',
                'verbose_name_plural': '服务类型表',
                'db_table': 'ops_service',
            },
        ),
        migrations.AddField(
            model_name='project_deploy_record',
            name='d_ticket_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='deploy_ticket', to='projs.Project_Deploy_Ticket', verbose_name='关联工单记录表'),
        ),
        migrations.AddField(
            model_name='project_config_ticket',
            name='proj_role',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='projs.ProjectConfig', verbose_name='项目角色'),
        ),
        migrations.AddField(
            model_name='deploylog',
            name='project_config',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='projs.ProjectConfig'),
        ),
        migrations.AlterUniqueTogether(
            name='service',
            unique_together={('service_name', 'service_asset')},
        ),
        migrations.AlterUniqueTogether(
            name='project_deploy_ticket',
            unique_together={('ticket_no', 'ticket_config', 'ticket_commit')},
        ),
        migrations.AlterUniqueTogether(
            name='project_deploy_record',
            unique_together={('deploy_ip', 'd_ticket_id')},
        ),
        migrations.AlterUniqueTogether(
            name='project_config_ticket',
            unique_together={('proj_name', 'proj_env', 'proj_app')},
        ),
        migrations.AlterUniqueTogether(
            name='project',
            unique_together={('project_env', 'project_name')},
        ),
    ]
